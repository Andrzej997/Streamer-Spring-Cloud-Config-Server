DROP VIEW IF EXISTS USERS_VIEW;
DROP FOREIGN TABLE IF EXISTS USERS;
DROP SERVER IF EXISTS users_srv;
DROP EXTENSION IF EXISTS postgres_fdw;
DROP TABLE IF EXISTS MUSIC_ALBUMS CASCADE;
DROP TABLE IF EXISTS MUSIC_ARTISTS CASCADE;
DROP TABLE IF EXISTS MUSIC_AUTHORS CASCADE;
DROP TABLE IF EXISTS MUSIC_FILES CASCADE;
DROP TABLE IF EXISTS MUSIC_GENRES CASCADE;
DROP TABLE IF EXISTS MUSIC_PLAYLISTS CASCADE;
DROP TABLE IF EXISTS PLAYLISTS_SONGS CASCADE;
DROP TABLE IF EXISTS SONGS CASCADE;

CREATE TABLE MUSIC_ALBUMS (
  ALBUM_ID    BIGINT        NOT NULL,
  ALBUM_TITLE VARCHAR(1024) NOT NULL,
  ALBUM_YEAR  SMALLINT,
  COMMENTS    TEXT
);

CREATE TABLE MUSIC_ARTISTS (
  AUTHOR_ID  BIGINT NOT NULL,
  NAME       VARCHAR(255),
  NAME_2     VARCHAR(255),
  SURNAME    VARCHAR(255),
  BIRTH_YEAR SMALLINT,
  DEATH_YEAR SMALLINT,
  COMMENTS   TEXT,
  RATINGS    REAL
);

CREATE TABLE MUSIC_AUTHORS (
  AUTHOR_ID BIGINT NOT NULL,
  SONG_ID   BIGINT NOT NULL
);

CREATE TABLE MUSIC_FILES (
  MUSIC_FILE_ID BIGINT               NOT NULL,
  FILE_NAME     VARCHAR(1024)        NOT NULL,
  FILE_SIZE     INTEGER              NOT NULL,
  EXTENSION     VARCHAR(10)          NOT NULL,
  CREATION_DATE TIMESTAMP            NOT NULL,
  IS_PUBLIC     BOOLEAN DEFAULT TRUE NOT NULL,
  FILE 		OID 		     NOT NULL
);

CREATE TABLE MUSIC_GENRES (
  MUSIC_GENRE_ID BIGINT       NOT NULL,
  NAME           VARCHAR(255) NOT NULL,
  COMMENTS       TEXT
);

CREATE TABLE MUSIC_PLAYLISTS (
  PLAYLIST_ID   BIGINT NOT NULL,
  USER_ID       BIGINT,
  TITLE         TEXT   NOT NULL,
  CREATION_DATE TIMESTAMP
);

CREATE TABLE PLAYLISTS_SONGS (
  PLAYLIST_ID  BIGINT   NOT NULL,
  SONG_ID      BIGINT   NOT NULL,
  ORDER_NUMBER SMALLINT NOT NULL
);

CREATE TABLE SONGS (
  SONG_ID         BIGINT        NOT NULL,
  TITLE           VARCHAR(1024) NOT NULL,
  FILE_ID         BIGINT        NOT NULL,
  RATING_TIMES    BIGINT,
  ALBUM_ID        BIGINT,
  MUSIC_GENRE_ID  BIGINT,
  RATING          REAL,
  PRODUCTION_YEAR SMALLINT,
  OWNER_ID        BIGINT
);


ALTER TABLE MUSIC_ALBUMS
  ADD CONSTRAINT PK_MUSIC_ALBUMS
PRIMARY KEY (ALBUM_ID);


ALTER TABLE MUSIC_ARTISTS
  ADD CONSTRAINT PK_AUTHORS
PRIMARY KEY (AUTHOR_ID);


ALTER TABLE MUSIC_AUTHORS
  ADD CONSTRAINT PK_MUSIC_AUTHORS_ID
PRIMARY KEY (AUTHOR_ID, SONG_ID);


ALTER TABLE MUSIC_FILES
  ADD CONSTRAINT PK_MUSIC_FILES
PRIMARY KEY (MUSIC_FILE_ID);


ALTER TABLE MUSIC_GENRES
  ADD CONSTRAINT PK_MUSIC_GENRE
PRIMARY KEY (MUSIC_GENRE_ID);


ALTER TABLE MUSIC_PLAYLISTS
  ADD CONSTRAINT PK_MUSIC_PLAYLIST
PRIMARY KEY (PLAYLIST_ID);


ALTER TABLE PLAYLISTS_SONGS
  ADD CONSTRAINT PK_PLAYLIST_SONGS
PRIMARY KEY (PLAYLIST_ID, SONG_ID);

ALTER TABLE SONGS
  ADD CONSTRAINT PK_SONG
PRIMARY KEY (SONG_ID);


ALTER TABLE PLAYLISTS_SONGS
  ADD CONSTRAINT FK_PLAYLIST_SONGS_MUSIC_PLAYLIST
FOREIGN KEY (PLAYLIST_ID) REFERENCES MUSIC_PLAYLISTS (PLAYLIST_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE PLAYLISTS_SONGS
  ADD CONSTRAINT FK_PLAYLIST_SONGS_SONGS
FOREIGN KEY (SONG_ID) REFERENCES SONGS (SONG_ID)
ON DELETE NO ACTION ON UPDATE NO ACTION;

ALTER TABLE SONGS
  ADD CONSTRAINT FK_SONGS_ALBUMS
FOREIGN KEY (ALBUM_ID) REFERENCES MUSIC_ALBUMS (ALBUM_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE SONGS
  ADD CONSTRAINT FK_SONGS_MUSIC_FILES
FOREIGN KEY (FILE_ID) REFERENCES MUSIC_FILES (MUSIC_FILE_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE SONGS
  ADD CONSTRAINT FK_SONGS_MUSIC_GENRES
FOREIGN KEY (MUSIC_GENRE_ID) REFERENCES MUSIC_GENRES (MUSIC_GENRE_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE MUSIC_AUTHORS
	ADD CONSTRAINT FK_MUSIC_AUTHORS_ARTISTS
FOREIGN KEY (AUTHOR_ID) REFERENCES MUSIC_ARTISTS (AUTHOR_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE MUSIC_AUTHORS
	ADD CONSTRAINT FK_MUSIC_AUTHORS_SONGS
FOREIGN KEY (SONG_ID) REFERENCES SONGS (SONG_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

CREATE INDEX ON SONGS (FILE_ID);

CREATE INDEX ON SONGS (ALBUM_ID);

CREATE INDEX ON SONGS (MUSIC_GENRE_ID);

CREATE INDEX ON SONGS (OWNER_ID);

CREATE INDEX ON MUSIC_AUTHORS (AUTHOR_ID);

CREATE INDEX ON MUSIC_AUTHORS (SONG_ID);

CREATE INDEX ON PLAYLISTS_SONGS (PLAYLIST_ID);

CREATE INDEX ON PLAYLISTS_SONGS (SONG_ID);

CREATE INDEX ON MUSIC_PLAYLISTS (USER_ID);

CREATE SEQUENCE DEFAULTDBSEQ START 1;


CREATE EXTENSION postgres_fdw;

CREATE SERVER users_srv foreign data wrapper postgres_fdw OPTIONS 
        ( host 'usersdb', port '5432', dbname 'usersdb');
		
CREATE USER MAPPING FOR sysadm SERVER users_srv OPTIONS 
        ( user 'sysadm', password 'sysadm' );

create foreign table USERS (
  USER_ID     BIGINT        NOT NULL,
  USER_NAME   VARCHAR(255)  NOT NULL,
  PASSWORD    VARCHAR(255)  NOT NULL,
  NAME        VARCHAR(255),
  SURNAME     VARCHAR(255),
  NATIONALITY VARCHAR(255),
  EMAIL       VARCHAR(1024) NOT NULL
) SERVER users_srv OPTIONS ( schema_name 'users_schema', table_name 'users' );

CREATE OR REPLACE VIEW USERS_VIEW AS SELECT * FROM USERS;

ALTER TABLE MUSIC_PLAYLISTS
  ADD CONSTRAINT FK_MUSIC_PLAYLIST_USERS
FOREIGN KEY (USER_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE ON UPDATE CASCADE;

ALTER TABLE SONGS
  ADD CONSTRAINT FK_SONGS_USERS
FOREIGN KEY (OWNER_ID) REFERENCES USERS (USER_ID)
ON DELETE CASCADE ON UPDATE CASCADE;
